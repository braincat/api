swagger: '2.0'
info:
  version: 0.6.0
  title: Structurizr
  description: This is the API for Structurizr.
host: api.structurizr.com
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /workspace/{id}:
    get:
      parameters:
        - name: id
          in: path
          description: The workspace ID.
          type: number
          format: long
          required: true
      responses:
        '200':
          description: A Structurizr workspace.
          schema:
            $ref: '#/definitions/Workspace'
    put:
      parameters:
        - name: id
          in: path
          description: The workspace ID.
          type: number
          format: long
          required: true
        - name: workspace
          in: body
          description: The workspace JSON you want to put.
          schema:
            $ref: '#/definitions/Workspace'
          required: true
      responses:
        '200':
          description: Updates the workspace.

definitions:

  Workspace:
    type: object
    description: Represents a Structurizr workspace, which is a wrapper for a software architecture model and the associated views.
    properties:
      id:
        type: number
        format: long
        description: The workspace ID.
      name:
        type: string
        description: The name of the workspace.
      description:
        type: string
        description: A short description of the workspace.
      thumbnail:
        type: string
        description: The thumbnail associated with the workspace; a Base64 encoded PNG file as a Data URI (data:image/png;base64).
      model:
        type: object
        description: The software architecture model.
        $ref: "#/definitions/Model"
      views:
        type: string
        description: The set of views onto a software architecture model.
        $ref: "#/definitions/Views"

  Model:
    type: object
    description: A software architecture model.
    properties:
      people:
        type: array
        items:
          $ref: "#/definitions/Person"
      softwareSystems:
        type: array
        items:
          $ref: "#/definitions/SoftwareSystem"

  Person:
    type: object
    description: A person who uses a software system.
    properties:
      id:
        type: string
        description: The ID of this person in the model.
      name:
        type: string
        description: The name of this person.
      description:
        type: string
        description: A short description of this person.
      tags:
        type: string
        description: A comma separated list of tags associated with this person.
      location:
        type: string
        description: The location of this person.
        enum: [ "Extenal", "Internal", "Unspecified" ]
      relationships:
        type: array
        items:
        description: The set of relationships between this person and other elements.
        items:
          $ref: "#/definitions/Relationship"

  SoftwareSystem:
    type: object
    description: A software system.
    properties:
      id:
        type: string
        description: The ID of this software system in the model.
      name:
        type: string
        description: The name of this software system.
      description:
        type: string
        description: A short description of this software system.
      location:
        type: string
        description: The location of this software system.
        enum: [ "Extenal", "Internal", "Unspecified" ]
      tags:
        type: string
        description: A comma separated list of tags associated with this software system.
      containers:
        type: array
        description: The set of containers within this software system.
        items:
          $ref: "#/definitions/Container"
      relationships:
        type: array
        description: The set of relationships between this software system and other elements.
        items:
          $ref: "#/definitions/Relationship"

  Container:
    type: object
    description: A container (something that can execute code or host data).
    properties:
      id:
        type: string
        description: The ID of this container in the model.
      name:
        type: string
        description: The name of this container.
      description:
        type: string
        description: A short description of this container.
      technology:
        type: string
        description: The technology associated with this container (e.g. Apache Tomcat).
      tags:
        type: string
        description: A comma separated list of tags associated with this container.
      components:
        type: array
        description: The set of components within this container.
        items:
          $ref: "#/definitions/Component"
      relationships:
        type: array
        description: The set of relationships between this container and other elements.
        items:
          $ref: "#/definitions/Relationship"

  Component:
    type: object
    description: A component (a grouping of related functionality behind an interface that runs inside a container).
    properties:
      id:
        type: string
        description: The ID of this component in the model.
      name:
        type: string
        description: The name of this component.
      description:
        type: string
        description: A short description of this component.
      technology:
        type: string
        description: The technology associated with this component (e.g. Spring Bean).
      interfaceType:
        type: string
        description: The interface type (e.g. a fully qualified Java interface name).
      implementationType:
        type: string
        description: The implementation type (e.g. a fully qualified Java class name).
      sourcePath:
        type: string
        description: The source code path that reflects this component (e.g. a GitHub URL).
      tags:
        type: string
        description: A comma separated list of tags associated with this container.
      relationships:
        type: array
        description: The set of relationships between this container and other elements.
        items:
          $ref: "#/definitions/Relationship"

  Relationship:
    type: object
    description: A relationship between two elements.
    properties:
      id:
        type: string
        description: The ID of this relationship in the model.
      description:
        type: string
        description: A short description of this relationship.
      tags:
        type: string
        description: A comma separated list of tags associated with this relationship.
      sourceId:
        type: string
        description: The ID of the source element.
      destinationId:
        type: string
        description: The ID of the destination element.
      technology:
        type: string
        description: The technology associated with this relationship (e.g. HTTPS, JDBC, etc).
      interactionStyle:
        type: string
        description: The interaction style (synchronous or asynchronous).
        enum: [ "Synchronous", "Asynchronous" ]

  Views:
    type: object
    description: The set of views onto a software architecture model.
    properties:
      systemContextViews:
        type: array
        description: The set of system context views.
        items:
          $ref: "#/definitions/SystemContextView"
      containerViews:
        type: array
        description: The set of container views.
        items:
          $ref: "#/definitions/ContainerView"
      componentViews:
        type: array
        description: The set of component views.
        items:
          $ref: "#/definitions/ComponentView"
      configuration:
        type: object
        description: The configuration object associated with this set of views.
        $ref: "#/definitions/Configuration"

  SystemContextView:
    type: object
    description: A system context view.
    properties:
      key:
        type: string
        description: An identifier for this view.
      softwareSystemId:
        type: string
        description: The ID of the software system this view is associated with.
      paperSize:
        type: string
        description: The paper size that should be used to render this view.
        enum: [ "A5_Portrait", "A5_Landscape", "A4_Portrait", "A4_Landscape", "A3_Portrait", "A3_Landscape", "A2_Portrait", "A2_Landscape", "Letter_Portrait", "Letter_Landscape", "Slide_4_3", "Slide_16_9" ]
      elements:
        type: array
        description: The set of elements in this views.
        items:
          $ref: "#/definitions/ElementInView"
      relationships:
        type: array
        description: The set of relationships in this views.
        items:
          $ref: "#/definitions/RelationshipInView"

  ContainerView:
    type: object
    description: A container view.
    properties:
      key:
        type: string
        description: An identifier for this view.
      softwareSystemId:
        type: string
        description: The ID of the software system this view is associated with.
      paperSize:
        type: string
        description: The paper size that should be used to render this view.
        enum: [ "A5_Portrait", "A5_Landscape", "A4_Portrait", "A4_Landscape", "A3_Portrait", "A3_Landscape", "A2_Portrait", "A2_Landscape", "Letter_Portrait", "Letter_Landscape", "Slide_4_3", "Slide_16_9" ]
      elements:
        type: array
        description: The set of elements in this views.
        items:
          $ref: "#/definitions/ElementInView"
      relationships:
        type: array
        description: The set of relationships in this views.
        items:
          $ref: "#/definitions/RelationshipInView"

  ComponentView:
    type: object
    description: A system context view.
    properties:
      key:
        type: string
        description: An identifier for this view.
      softwareSystemId:
        type: string
        description: The ID of the software system this view is associated with.
      containerId:
        type: string
        description: The ID of the container this view is associated with.
      paperSize:
        type: string
        description: The paper size that should be used to render this view.
        enum: [ "A5_Portrait", "A5_Landscape", "A4_Portrait", "A4_Landscape", "A3_Portrait", "A3_Landscape", "A2_Portrait", "A2_Landscape", "Letter_Portrait", "Letter_Landscape", "Slide_4_3", "Slide_16_9" ]
      elements:
        type: array
        description: The set of elements in this views.
        items:
          $ref: "#/definitions/ElementInView"
      relationships:
        type: array
        description: The set of relationships in this views.
        items:
          $ref: "#/definitions/RelationshipInView"

  ElementInView:
    type: object
    description: An instance of a model element (Person, Software System, Container or Component) in a View.
    properties:
      id:
        type: string
        description: The ID of the element.
      x:
        type: number
        format: integer
        description: The horizontal position of the element when rendered.
      y:
        type: number
        format: integer
        description: The vertical position of the element when rendered.

  RelationshipInView:
    type: object
    description: An instance of a model relationship in a View.
    properties:
      id:
        type: string
        description: The ID of the relationship.
      order:
        type: string
        description: The order of this relationship (used in dynamic views only; e.g. 1.0, 1.1, 2.0, etc).
      description:
        type: string
        description: The description of this relationship (used in dynamic views only).
      vertices:
        type: array
        description: The set of vertices used to render the relationship.
        items:
          $ref: "#/definitions/Vertex"

  Vertex:
    type: object
    description: The X, Y coordinate of a bend in a line.
    properties:
      x:
        type: number
        format: integer
        description: The horizontal position of the vertex when rendered.
      y:
        type: number
        format: integer
        description: The vertical position of the vertex when rendered.

  Configuration:
    type: object
    description: The configuration associated with a set of views.
    properties:
      styles:
        type: object
        description: The styles associated with this set of views.
        properties:
          metadata:
            type: string
            description: The placement of the diagram metadata.
            enum: [ "Top", "Bottom", "None" ]
          elements:
            type: array
            description: The set of element styles.
            items:
              $ref: "#/definitions/ElementStyle"
          relationships:
            type: array
            description: The set of relationship styles.
            items:
              $ref: "#/definitions/RelationshipStyle"

  ElementStyle:
    type: object
    description: A definition of an element style.
    properties:
      tag:
        type: string
        description: The tag to which this element style applies.
      width:
        type: number
        format: integer
        description: The width of the element, in pixels.
      height:
        type: number
        format: integer
        description: The height of the element, in pixels.
      background:
        type: string
        description: The background colour of the element, as a HTML RGB hex string (e.g. #123456).
      color:
        type: string
        description: The foreground (text) colour of the element, as a HTML RGB hex string (e.g. #123456).
      fontSize:
        type: number
        format: integer
        description: The standard font size used to render text, in pixels.
      shape:
        type: string
        description: The shape used to render the element.
        enum: [ "Box", "RoundedBox", "Cylinder", "Person", "Folder" ]

  RelationshipStyle:
    type: object
    description: A definition of a relationship style.
    properties:
      tag:
        type: string
        description: The tag to which this relationship style applies.
      thickness:
        type: number
        format: integer
        description: The thickness of the line, in pixels.
      color:
        type: string
        description: The colour of the line, as a HTML RGB hex string (e.g. #123456).
      fontSize:
        type: number
        format: integer
        description: The standard font size used to render the relationship annotation, in pixels.
      width:
        type: number
        format: integer
        description: The width of the relationship annotation, in pixels.
      dashed:
        type: boolean
        description: A flag to indicate whether the line is rendered as dashed or not.
      smooth:
        type: boolean
        description: A flag to indicate whether the line is rendered as smooth (curved) or not.
      position:
        type: number
        format: integer
        description: The position of the annotation along the line; 0 (start) to 100 (end).
